

services:
  backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: go_backend
    environment:
      # - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@host.docker.internal:5432/${DB_NAME}?sslmode=disable
      - DB_HOST=${DB_HOST}  # Use host.docker.internal for Docker Desktop
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - JWT_REFRESH_EXPIRY=${JWT_REFRESH_EXPIRY}
      - API_PORT=${API_PORT}
      - APP_NAME=${APP_NAME}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GIN_MODE=release

    extra_hosts:
      - "host.docker.internal:host-gateway"  

    depends_on:
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped

  frontend:
    build: 
      context: ./client
      dockerfile: Dockerfile.dev # DEV mode
    container_name: nextjs_frontend
    environment:
      - NODE_ENV=development  # DEV mode
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:  ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - frontend-network
    restart: unless-stopped
    volumes:
      - ./client:/app  # Mount source code into container
      - /app/node_modules  # Prevent overwriting node_modules

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "8088:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro   # to prevent default configs from loading
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped

  # Redis (for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

volumes:
  redis_data:

networks:
  backend-network:
    driver: bridge
    internal: false
  frontend-network:
    driver: bridge  # Frontend network allows external access via nginx
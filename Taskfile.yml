version: "3"

vars:
  # Colors
  GREEN: '\033[32m'
  YELLOW: '\033[33m'
  RED: '\033[31m'
  BLUE: '\033[34m'
  RESET: '\033[0m'

  # Docker Compose commands
  DEV_CMD: "docker compose -f docker-compose.yml -f docker-compose.dev.yml --env-file .env.development"
  PROD_CMD: "docker compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env.production"

tasks:
  # Default help task
  default:
    desc: "Show available commands"
    silent: true
    cmds:
      - echo "{{.BLUE}}üöÄ Available Commands:{{.RESET}}"
      - echo ""
      - echo "{{.GREEN}}Development:{{.RESET}}"
      - echo "  dev              - Start development environment"
      - echo "  dev-build        - Build and start development"
      - echo "  dev-logs         - Show development logs"
      - echo "  dev-down         - Stop development"
      - echo ""
      - echo "{{.GREEN}}Production:{{.RESET}}"
      - echo "  prod             - Start production environment"
      - echo "  prod-build       - Build and start production"
      - echo "  prod-logs        - Show production logs"
      - echo "  prod-down        - Stop production"
      - echo ""
      - echo "{{.GREEN}}Utilities:{{.RESET}}"
      - echo "  status           - Show environment status"
      - echo "  ps               - Show running containers"
      - echo "  logs             - Show logs"
      - echo "  down             - Stop all environments"
      - echo "  migrate-up      - Run database migrations up"
      - echo "  backup          - Create database backup"
      - echo "  shell-api       - Shell into backend container"
      - echo "  shell-db        - Shell into database container"
      - echo "  clean           - Clean up everything"
      - echo "  clean-soft      - Soft cleanup (containers only)"
      - echo "  setup-dev       - Set up development environment"
      - echo "  dev-tools       - Show development tools URLs"
      - echo ""
      - echo "{{.GREEN}}Additional Tasks:{{.RESET}}"
      - echo "  go-fmt          - Format Go code"
      - echo "  go-lint         - Lint Go code"
      - echo "  go-test-local   - Run Go tests locally"
      - echo "  go-install      - Install Go dependencies"
      - echo "  go-build        - Build Go binary"
      - echo "  frontend-install - Install frontend dependencies"
      - echo "  frontend-dev    - Run frontend in development mode"
      - echo "  frontend-build  - Build frontend for production"
      - echo "  frontend-lint   - Lint frontend code"

  # =============================================================================
  # DEVELOPMENT COMMANDS
  # =============================================================================

  dev:
    desc: "Start development environment"
    cmds:
      - echo "{{.GREEN}}üöÄ Starting development environment...{{.RESET}}"
      - "{{.DEV_CMD}} up"

  dev-build:
    desc: "Build and start development environment"
    cmds:
      - echo "{{.GREEN}}üî® Building and starting development environment...{{.RESET}}"
      - "{{.DEV_CMD}} up --build"

  dev-detached:
    desc: "Start development environment in background"
    cmds:
      - echo "{{.GREEN}}üöÄ Starting development environment in background...{{.RESET}}"
      - "{{.DEV_CMD}} up -d"

  dev-logs:
    desc: "Follow development logs"
    cmds:
      - echo "{{.GREEN}}üìã Following development logs...{{.RESET}}"
      - "{{.DEV_CMD}} logs -f"

  dev-restart:
    desc: "Restart development services"
    cmds:
      - echo "{{.YELLOW}}üîÑ Restarting development services...{{.RESET}}"
      - "{{.DEV_CMD}} restart"

  dev-down:
    desc: "Stop development environment"
    cmds:
      - echo "{{.YELLOW}}üõë Stopping development environment...{{.RESET}}"
      - "{{.DEV_CMD}} down"

  # =============================================================================
  # PRODUCTION COMMANDS
  # =============================================================================

  prod:
    desc: "Start production environment"
    cmds:
      - echo "{{.GREEN}}üè≠ Starting production environment...{{.RESET}}"
      - "{{.PROD_CMD}} up -d"

  prod-build:
    desc: "Build and start production environment"
    cmds:
      - echo "{{.GREEN}}üî® Building and starting production environment...{{.RESET}}"
      - "{{.PROD_CMD}} up -d --build"

  prod-logs:
    desc: "Follow production logs"
    cmds:
      - echo "{{.GREEN}}üìã Following production logs...{{.RESET}}"
      - "{{.PROD_CMD}} logs -f"

  prod-restart:
    desc: "Restart production services"
    cmds:
      - echo "{{.YELLOW}}üîÑ Restarting production services...{{.RESET}}"
      - "{{.PROD_CMD}} restart"

  prod-down:
    desc: "Stop production environment"
    cmds:
      - echo "{{.YELLOW}}üõë Stopping production environment...{{.RESET}}"
      - "{{.PROD_CMD}} down"

  prod-deploy:
    desc: "Deploy to production (pull + build + start)"
    cmds:
      - echo "{{.GREEN}}üöÄ Deploying to production...{{.RESET}}"
      - echo "{{.YELLOW}}Pulling latest images...{{.RESET}}"
      - "{{.PROD_CMD}} pull"
      - echo "{{.YELLOW}}Building and starting services...{{.RESET}}"
      - "{{.PROD_CMD}} up -d --build"
      - echo "{{.GREEN}}‚úÖ Production deployment complete!{{.RESET}}"
      - echo "{{.BLUE}}üí° Run 'task prod-logs' to monitor the deployment{{.RESET}}"

  # =============================================================================
  # UTILITY COMMANDS
  # =============================================================================

  status:
    desc: "Show environment status"
    cmds:
      - echo "{{.GREEN}}üìä Environment Status:{{.RESET}}"
      - echo ""
      - echo "{{.BLUE}}Development Environment:{{.RESET}}"
      - "{{.DEV_CMD}} ps 2>/dev/null || echo 'Not running'"
      - echo ""
      - echo "{{.BLUE}}Production Environment:{{.RESET}}"
      - "{{.PROD_CMD}} ps 2>/dev/null || echo 'Not running'"

  ps:
    desc: "Show running containers"
    cmds:
      - echo "{{.GREEN}}üìã Development Environment:{{.RESET}}"
      - "{{.DEV_CMD}} ps 2>/dev/null || echo 'Not running'"
      - echo ""
      - echo "{{.GREEN}}üìã Production Environment:{{.RESET}}"
      - "{{.PROD_CMD}} ps 2>/dev/null || echo 'Not running'"

  logs:
    desc: "Show logs from current environment"
    cmds:
      - echo "{{.GREEN}}üìã Showing logs...{{.RESET}}"
      - "{{.DEV_CMD}} logs -f 2>/dev/null || {{.PROD_CMD}} logs -f"

  down:
    desc: "Stop all environments"
    cmds:
      - echo "{{.YELLOW}}üõë Stopping all environments...{{.RESET}}"
      - "{{.DEV_CMD}} down 2>/dev/null || true"
      - "{{.PROD_CMD}} down 2>/dev/null || true"

  # =============================================================================
  # TESTING & DATABASE COMMANDS
  # =============================================================================

  test:
    desc: "Run tests"
    cmds:
      - echo "{{.GREEN}}üß™ Running tests...{{.RESET}}"
      - "{{.DEV_CMD}} exec backend go test ./... -v"

  migrate-up:
    desc: "Run database migrations up"
    cmds:
      - echo "{{.GREEN}}‚¨ÜÔ∏è  Running database migrations up...{{.RESET}}"
      - '{{.DEV_CMD}} exec backend migrate -path ./migrations -database "$DATABASE_URL" up'

  backup:
    desc: "Create database backup"
    cmds:
      - echo "{{.GREEN}}üíæ Creating database backup...{{.RESET}}"
      - mkdir -p ./backup
      - "{{.DEV_CMD}} exec postgres pg_dump -U admin hicfo > ./backup/backup_$(date +%Y%m%d_%H%M%S).sql"

  # =============================================================================
  # SHELL ACCESS
  # =============================================================================

  shell-api:
    desc: "Shell into backend container"
    cmds:
      - echo "{{.GREEN}}üêö Opening backend shell...{{.RESET}}"
      - "{{.DEV_CMD}} exec backend sh"

  shell-db:
    desc: "Shell into database container"
    cmds:
      - echo "{{.GREEN}}üêö Opening database shell...{{.RESET}}"
      - "{{.DEV_CMD}} exec postgres psql -U admin -d hicfo"

  # =============================================================================
  # CLEANUP COMMANDS
  # =============================================================================

  clean:
    desc: "Clean up everything"
    prompt: "This will remove all containers, images, and volumes. Continue?"
    cmds:
      - echo "{{.RED}}üßπ Cleaning up everything...{{.RESET}}"
      - "{{.DEV_CMD}} down -v --remove-orphans 2>/dev/null || true"
      - "{{.PROD_CMD}} down -v --remove-orphans 2>/dev/null || true"
      - docker system prune -af --volumes
      - echo "{{.GREEN}}‚úÖ Cleanup complete!{{.RESET}}"

  clean-soft:
    desc: "Soft cleanup (containers only)"
    cmds:
      - echo "{{.YELLOW}}üßπ Soft cleanup (containers only)...{{.RESET}}"
      - "{{.DEV_CMD}} down --remove-orphans 2>/dev/null || true"
      - "{{.PROD_CMD}} down --remove-orphans 2>/dev/null || true"
      - docker container prune -f

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  setup-dev:
    desc: "Set up development environment"
    cmds:
      - echo "{{.GREEN}}‚öôÔ∏è  Setting up development environment...{{.RESET}}"
      - |
        if [ ! -f .env.development ]; then
          echo "{{.YELLOW}}Creating .env.development from template...{{.RESET}}"
          cp .env.development.example .env.development 2>/dev/null || echo "{{.RED}}‚ùå .env.development.example not found{{.RESET}}"
        fi
      - echo "{{.GREEN}}‚úÖ Development setup complete!{{.RESET}}"

  dev-tools:
    desc: "Show development tools URLs"
    cmds:
      - echo "{{.GREEN}}üõ†Ô∏è  Development tools:{{.RESET}}"
      - 'echo "  pgAdmin        - http://localhost:5050"'
      - 'echo "  Redis Commander - http://localhost:8081"'
      - 'echo "  Swagger UI     - http://localhost:8082"'
      - 'echo "  MailHog        - http://localhost:8025"'
      - 'echo "  MinIO          - http://localhost:9001"'

  # =============================================================================
  # ADDITIONAL GO-SPECIFIC TASKS FOR YOUR BACKEND
  # =============================================================================

  go-install:
    desc: "Install Go dependencies"
    dir: hi-cfo/api
    cmds:
      - go mod tidy
      - go mod download
  go-fmt:
    desc: "Format Go code in backend"
    dir: hi-cfo/api
    cmds:
      - goimports -w .
      - gofmt -w .

  go-lint:
    desc: "Lint Go code in backend"
    dir: hi-cfo/api
    deps: [go-fmt]
    cmds:
      - golangci-lint run

  go-test-local:
    desc: "Run Go tests locally (not in Docker)"
    dir: hi-cfo/api
    cmds:
      - go test -v ./...

  go-build:
    desc: "Build Go binary locally"
    dir: hi-cfo/api
    cmds:
      - go build -o ../../bin/api ./cmd/main.go

  # Frontend specific tasks
  frontend-install:
    desc: "Install frontend dependencies"
    dir: hi-cfo/web
    cmds:
      - npm install

  frontend-dev:
    desc: "Run frontend in development mode"
    dir: hi-cfo/web
    cmds:
      - npm run dev

  frontend-build:
    desc: "Build frontend for production"
    dir: hi-cfo/web
    cmds:
      - npm run build

  frontend-lint:
    desc: "Lint frontend code"
    dir: hi-cfo/web
    cmds:
      - npm run lint

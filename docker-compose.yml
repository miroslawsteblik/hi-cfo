services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --bind 0.0.0.0 --protected-mode yes --port 6379
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    networks:
      - backend-network
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:${REDIS_PASSWORD}

    depends_on:
      - redis
    networks:
      - backend-network

  backend:
    container_name: go_backend
    build:
      context: ./api
      dockerfile: ../docker/api/Dockerfile
      target: ${BUILD_TARGET:-production}
    environment:
      - ENV=${ENV:-production}
      - GIN_MODE=${GIN_MODE:-release}
      - LOG_LEVEL=${LOG_LEVEL_INFO}

      - DB_HOST=postgres_db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=5432

      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - JWT_REFRESH_EXPIRY=${JWT_REFRESH_EXPIRY}

      - API_PORT=8080
      - APP_NAME=${APP_NAME}

      - REDIS_HOST=redis_cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped

  frontend:
    container_name: nextjs_frontend
    build:
      context: ./web
      dockerfile: ../docker/web/Dockerfile
      target: ${FRONTEND_BUILD_TARGET:-production}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    networks:
      - frontend-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "8088:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - frontend-network
    restart: unless-stopped



volumes:
  postgres_data:
  redis_data:


networks:
  backend-network:
    driver: bridge
    internal: true # Backend services don't need internet access
  frontend-network:
    driver: bridge # Frontend network allows external access via nginx

